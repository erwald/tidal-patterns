-- Imports & Config

import Sound.Tidal.Additions
import Sound.Tidal.Utils
import qualified Sound.Tidal.Chords as Chords
import qualified Sound.Tidal.Scales as Scales

cps (50/60/3)

import Sound.Tidal.MIDI.Context

devices <- midiDevices
m1 <- midiStream devices "Pro24 MIDI" 1 synthController
m2 <- midiStream devices "Pro24 MIDI" 2 synthController

-- Silence

hush

m1 silence
m2 silence

-- Composition

d1
  -- $ slow 4 $ linger (1/6)
  -- $ every 5 (zoom (0.25, 0.75))
  -- $ brak
  -- $ spread (rarely $) [fast 2, scramble 2, linger (1/6)]
  -- $ iter 6
  -- $ degradeBy 0.4
  -- $ scramble 6
  -- $ unit "cycle"
  $ slow 2
  $ stack
    [ stack [
        note $ never (octShift (-1)) melodyA1,
        note $ always (octShift 1) melodyA2
        -- note $ never (octShift (1)) melodyB1
      ]
    , stack [
        -- note $ octShift (-1) $ melodyChordProgression,
        -- note $ select melodyChordProgression "[[0 2 1 5 4 1](9,11)]"
        note $ (always $ octShift (-3)) $ melodyChordArp (1/3/12) (Custom [0,0,4,5,4])
        -- note $ octShift (-1) $ select melodyChordProgression "[[0 1 2 3 4 5 6 7](7,11)]*3",
        -- note $ octShift (-1) $ select melodyChordProgression (phaseShift 12 2 "[[0 1 2 3 4 5 6 1](9,16)]*3")
        -- note $ octShift (-2) $ select melodyChordProgression "[[0 ~ ~ 0 1 2](9,16)]*3"
      ]
  ] # s "supermandolin" # legato 1.1

-- Melodies & Harmonics

abMinor = inScale Scales.minor 8
ebMinor = inScale Scales.minor 3 -- Dominant
cbMajor = inScale Scales.major (-1) -- Relative
gbMajor = inScale Scales.major 6 -- Dominant of relative
csharpMinor = inScale Scales.minor 1 -- Subdominant
inKey = abMinor
melodyA1 :: Pattern Int
melodyA1 = inKey $ cat
  [ "0@2 [2 1] 0 [-2 0] [2 1]"
  , "2 -1 [1 0] -1 -3 [4 3]"
  , "2@2 4 2 [1 0] [-1 -2]"
  , "-3 0 [-1 -2] -3 -1 [0 1]"
  ]
melodyA2 :: Pattern Int
melodyA2 = inKey $ cat
  [ "~ [5 4] [2 1] 2 -2 ~"
  , "~ [4 3] [1 0] 1 -3 ~"
  , "~ [7 6] [4 3] 5 0 ~"
  , "~ [2 1] [-1 -2] -1 -2 ~"
  ]
melodyB1 :: Pattern Int
melodyB1 = slow 4 $ inKey $ stack
  [ "0 [1 2] [3 4] 5 2 [7 6] 5@2 ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ [4 3] [2 1]"
  , "~ ~ ~ ~ ~ ~ ~ 2 [6 4] 1 2 1 2 5 4 5@2 ~ ~ ~ ~ ~ ~ ~"
  , "~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ [2 5] 6 7 [6 5] 4@2 2"
  ]
melodyChordProgression :: Pattern Int
melodyChordProgression = slow 4 $ inKey
  "[0,2,5]@7 [-1,2,4] [-1,1,4]@2 [-1,2,4] [-1,1,4]\
  \ [2,5,7]@2 [2,4,7] [2,5,7]@3 [-3,-1,2] [-3,0,2] [-3,-1,2]@3 [-3,0,2]"
melodyChordArp :: Ratio Integer -> BrokenChord -> Pattern Int
melodyChordArp noteDuration brokenChord = arp melodyChordProgression noteDuration brokenChord

-- Notes

-- Exposition       -> Development                -> Recapitulation
-- Mel#1  -> Mel#2  -> Euler     Arp   harmonized -> Mel#1 & Mel#2
-- Ab min -> C# min -> Gb maj -> Cb maj -> Eb min -> Ab min
--
-- Nord:31

-- A (A#/Bb) B C (C#/Db) D (D#/Eb) E F (F#/Gb) G (G#/Ab)
